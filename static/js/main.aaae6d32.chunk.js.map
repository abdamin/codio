{"version":3,"sources":["assets/logo/codio.png","components/CodeEditor.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CodeEditor","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setIframeContent","html","css","js","source","concat","setState","finalCode","state","props","changeFileCode","onChangeHTML","newValue","console","log","javascript","onChangeCSS","onChangeJavascript","react_default","a","createElement","className","lib_default","mode","theme","onChange","name","editorProps","$blockScrolling","height","width","enableBasicAutocompletion","enableSnippets","enableLiveAutocompletion","value","style","backgroundColor","boxShadow","id","title","srcDoc","Component","FileDownload","require","App","updatedCode","code","_this2","href","src","logo","alt","fontFamily","fontWeight","fontSize","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","window","location","index_es","icon","faFile","onClick","faFileDownload","CodeEditor_CodeEditor","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aaae6d32.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/codio.4515349e.png\";","import React, { Component } from \"react\";\nimport AceEditor from \"react-ace\";\nimport \"brace/mode/html\";\nimport \"brace/mode/javascript\";\nimport \"brace/mode/css\";\nimport \"brace/theme/monokai\";\nimport \"./CodeEditor.css\";\nimport \"brace/ext/language_tools\";\n\nexport default class CodeEditor extends Component {\n  constructor() {\n    super();\n    this.state = {\n      html: ` <!--HTML-->\n\n<h1>Hello World</h1>`,\n      css: ` /*CSS*/\n\nbody {\n    background-color: black;\n    text-align: center;\n} `,\n      javascript: ` /*JavaScript*/\n\nvar h1 = document.querySelector(\"body\");\nh1.style.color = \"white\";\n      `,\n      finalCode: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.setIframeContent(\n      this.state.html,\n      this.state.css,\n      this.state.javascript\n    );\n  }\n\n  setIframeContent = (html, css, js) => {\n    const source = `\n      <html>\n        <head>\n          <style>\n            ${css}\n          </style>\n        </head>\n        <body>\n          ${html}\n          <script>\n            ${js}\n          </script>\n        </body>\n      </html>\n    `;\n    this.setState({ finalCode: source });\n\n    if (this.state.finalCode !== \"\") {\n      this.props.changeFileCode(this.state.finalCode);\n    }\n  };\n\n  onChangeHTML = newValue => {\n    console.log(\"change\", newValue);\n    this.setState({ html: newValue });\n    this.setIframeContent(\n      this.state.html,\n      this.state.css,\n      this.state.javascript\n    );\n  };\n  onChangeCSS = newValue => {\n    console.log(\"change\", newValue);\n    this.setState({ css: newValue });\n    this.setIframeContent(\n      this.state.html,\n      this.state.css,\n      this.state.javascript\n    );\n  };\n  onChangeJavascript = newValue => {\n    console.log(\"change\", newValue);\n    this.setState({ javascript: newValue });\n    this.setIframeContent(\n      this.state.html,\n      this.state.css,\n      this.state.javascript\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"row\">\n          <div className=\"col-md-4 pr-0\">\n            <div className=\"editor\">\n              <div className=\"type\">\n                <h3>HTML</h3>\n              </div>\n\n              <AceEditor\n                mode=\"html\"\n                theme=\"monokai\"\n                onChange={this.onChangeHTML}\n                name=\"UNIQUE_ID_OF_DIV\"\n                editorProps={{ $blockScrolling: true }}\n                height=\"350px\"\n                width=\"auto\"\n                enableBasicAutocompletion={true}\n                enableSnippets={true}\n                enableLiveAutocompletion={true}\n                value={this.state.html}\n                style={{\n                  backgroundColor: \"rgba(0,0,0,0.4)\",\n                  boxShadow: \"0px 3px rgba(0,0,0,0.9)\"\n                }}\n              />\n            </div>\n          </div>\n          <div className=\"col-md-4 p-0\">\n            <div className=\"editor\">\n              <div className=\"type\">\n                <h3>CSS</h3>\n              </div>\n\n              <AceEditor\n                mode=\"css\"\n                theme=\"monokai\"\n                onChange={this.onChangeCSS}\n                name=\"UNIQUE_ID_OF_DIV\"\n                editorProps={{ $blockScrolling: true }}\n                height=\"350px\"\n                width=\"auto\"\n                enableBasicAutocompletion={true}\n                enableSnippets={true}\n                enableLiveAutocompletion={true}\n                value={this.state.css}\n                id=\"css\"\n                style={{\n                  backgroundColor: \"rgba(0,0,0,0.4)\",\n                  boxShadow: \"0px 3px rgba(0,0,0,0.9)\"\n                }}\n              />\n            </div>\n          </div>\n          <div className=\"col-md-4 pl-0\">\n            <div className=\"editor\">\n              <div className=\"type\">\n                <h3>JavaScript</h3>\n              </div>\n\n              <AceEditor\n                mode=\"javascript\"\n                theme=\"monokai\"\n                onChange={this.onChangeJavascript}\n                name=\"UNIQUE_ID_OF_DIV\"\n                editorProps={{ $blockScrolling: true }}\n                height=\"350px\"\n                width=\"auto\"\n                enableBasicAutocompletion={true}\n                enableSnippets={true}\n                enableLiveAutocompletion={true}\n                value={this.state.javascript}\n                style={{\n                  backgroundColor: \"rgba(0,0,0,0.4)\",\n                  boxShadow: \"0px 3px rgba(0,0,0,0.9)\"\n                }}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <iframe title=\"code\" id=\"code\" srcDoc={this.state.finalCode} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CodeEditor from \"./components/CodeEditor\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFile, faFileDownload } from \"@fortawesome/free-solid-svg-icons\";\nimport logo from \"./assets/logo/codio.png\";\nconst FileDownload = require(\"js-file-download\");\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      code: `\n      <html>\n        <head>\n          <style>\n            /*CSS*/\n\n            body {\n              background-color: black;\n              text-align: center;\n            }\n          </style>\n        </head>\n        <body>\n          <!--HTML-->\n\n          <h1>\n            Hello World\n          </h1>  \n\n          <script>\n            /*JavaScript*/\n\n            var h1 = document.querySelector(\"body\");\n            h1.style.color = \"white\";\n          </script>\n        </body>\n      </html>\n    `\n    };\n  }\n\n  changeFileCode = updatedCode => {\n    this.setState({ code: updatedCode });\n  };\n  render() {\n    console.log(this.state.code);\n    return (\n      <div>\n        <nav\n          className=\"navbar navbar-dark fixed-top mb-4 navbar-expand-lg\"\n          style={{\n            backgroundColor: \"rgba(0,0,0,0.6)\",\n            boxShadow: \" 0 3px 5px rgb(0,0,0)\"\n          }}\n        >\n          <a className=\"navbar-brand\" href=\"/\">\n            <img\n              src={logo}\n              width=\"40\"\n              height=\"40\"\n              className=\"d-inline-block align-top ml-2\"\n              alt=\"\"\n            />\n            <span\n              style={{\n                fontFamily: \"Ubuntu\",\n                fontWeight: \"800\",\n                fontSize: \"25px\"\n              }}\n            >\n              {\" Codio\"}\n            </span>\n          </a>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarTogglerDemo02\"\n            aria-controls=\"navbarTogglerDemo02\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n            <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\n              <li className=\"nav-item mr-3\">\n                <a className=\"nav-link\" href={window.location.href}>\n                  <FontAwesomeIcon icon={faFile} className=\"\" />\n                  {\"  New Project\"}\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a\n                  className=\"nav-link\"\n                  href={\"#\"}\n                  onClick={() => FileDownload(this.state.code, \"project.html\")}\n                >\n                  <FontAwesomeIcon icon={faFileDownload} />\n                  {\" Download\"}\n                </a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        <CodeEditor changeFileCode={this.changeFileCode} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}